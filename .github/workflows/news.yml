name: Daily Tech News via Gemini

on:
  schedule:
    # Runs every day at 5:00 AM IST.
    # 5:00 AM IST is 23:30 UTC of the previous day.
    - cron: '30 23 * * *'
  workflow_dispatch:
    # Allows you to run this workflow manually from the Actions tab.

jobs:
  build_and_send_news:
    runs-on: ubuntu-latest
    steps:
      - name: Generate Tech News with Gemini
        id: gemini_news
        run: |
          # THE NEW PREMIUM PROMPT
          PROMPT="Aaj ki date hai $(date +'%B %d, %Y'). Is date ko dhyan mein rakhte hue, mujhe pichle 24 ghante ki top 3-4 sabse important technology news do. News ko ekdam engaging aur saral bhasha mein likhna. Output ko neeche diye gaye format mein hi taiyaar karna:

          ⚡ *Tech Taza Khabar* ⚡
          _$(date +'%A, %B %d, %Y')_
          ---

          1️⃣  *[Headline 1 with a relevant emoji]*
              *Kya hai?* - [Yahan pe news ki detailed summary likho.]
              *Iska matlab kya hai?* - [Yahan pe is news ka aam aadmi par kya asar padega aur iska future kya hai, woh samjhao.]

          2️⃣  *[Headline 2 with a relevant emoji]*
              *Kya hai?* - [Yahan pe news ki detailed summary likho.]
              *Iska matlab kya hai?* - [Yahan pe is news ka aam aadmi par kya asar padega aur iska future kya hai, woh samjhao.]

          3️⃣  *[Headline 3 with a relevant emoji]*
              *Kya hai?* - [Yahan pe news ki detailed summary likho.]
              *Iska matlab kya hai?* - [Yahan pe is news ka aam aadmi par kya asar padega aur iska future kya hai, woh samjhao.]

          ---
          💡 *_Aaj ka Tech Gyan_* 💡
          [Aaj ki kisi ek news se related koi bhi ek technical term (jaise 'Qubit' ya 'LLM') ko aasan bhasha mein samjhao.]
          ---

          Aapka apna,
          AI News Reporter 🤖"

          # **THE FIX:** We use jq to create a valid JSON payload for Gemini.
          # This handles all special characters and newlines in the PROMPT correctly.
          JSON_PAYLOAD_FOR_GEMINI=$(jq -n --arg prompt_text "$PROMPT" \
            '{contents: [{parts: [{text: $prompt_text}]}]}')

          # Calling the Gemini API with the clean JSON payload.
          API_RESPONSE=$(curl -s -H 'Content-Type: application/json' \
          -d "$JSON_PAYLOAD_FOR_GEMINI" \
          "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${{ secrets.GEMINI_API_KEY }}")

          NEWS_CONTENT=$(echo "${API_RESPONSE}" | jq -r '.candidates[0].content.parts[0].text')

          if [ -z "$NEWS_CONTENT" ] || [ "$NEWS_CONTENT" == "null" ]; then
            echo "Error: Could not retrieve news from Gemini."
            echo "API Response: ${API_RESPONSE}"
            exit 1
          fi
          
          echo "${NEWS_CONTENT}" > news.txt
          echo "News content saved to news.txt"

      - name: Send News to Telegram
        run: |
          # We use jq to read the text DIRECTLY from the file.
          JSON_PAYLOAD_FOR_TELEGRAM=$(jq -n \
            --arg chat_id "${{ secrets.TELEGRAM_CHAT_ID }}" \
            --rawfile text news.txt \
            --arg parse_mode "Markdown" \
            '{chat_id: $chat_id, text: $text, parse_mode: $parse_mode}')

          # Send the complete, clean JSON payload to the Telegram API.
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -H 'Content-Type: application/json' \
          -d "$JSON_PAYLOAD_FOR_TELEGRAM"

